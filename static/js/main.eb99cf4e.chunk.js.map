{"version":3,"sources":["components/config.js","components/commons/GridCards.js","components/views/LandingPage/LandingPage.js","components/views/NavBar/NavBar.js","components/views/MovieDetail/Sections/MainImage.js","components/views/MovieDetail/Sections/MovieInfo.js","components/views/MovieDetail/MovieDetail.js","components/App.js","serviceWorker.js","index.js"],"names":["API_URL","API_KEY","GridCards","props","key","image","movieId","movieName","lg","md","xs","href","alt","src","Title","Typography","LandingPage","buttonRef","useRef","useState","Movies","setMovies","MainMovieImage","setMainMovieImage","Loading","setLoading","CurrentPage","setCurrentPage","useEffect","endpoint","fetchMovies","window","addEventListener","handleScroll","fetch","then","result","json","results","page","catch","error","console","windowHeight","innerHeight","document","documentElement","offsetHeight","body","html","docHeight","Math","max","scrollHeight","clientHeight","pageYOffset","current","click","style","width","margin","level","gutter","map","movie","index","Fragment","poster_path","id","original_title","display","justifyContent","ref","className","onClick","NavBar","position","zIndex","MainImage","background","height","backgroundSize","backgroundPosition","maxWidth","bottom","marginLeft","color","title","fontSize","text","MovieInfo","bordered","Item","label","release_date","runtime","vote_average","popularity","status","MovieDetailPage","match","params","Movie","setMovie","LoadingForMovie","setLoadingForMovie","endpointForMovieInfo","fetchDetailInfo","backdrop_path","overview","App","fallback","paddingTop","minHeight","exact","path","component","MovieDetail","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb99cf4e.chunk.js","sourcesContent":["export const API_URL = \"https://api.themoviedb.org/3/\";\r\nexport const API_KEY = \"4c5d5fee72d4ec001f35ad4bc6443640\";\r\n\r\nexport const IMAGE_BASE_URL = \"http://image.tmdb.org/t/p/\";\r\n\r\n//Sizes: w300, w780, w1280, original\r\nexport const BACKDROP_SIZE = \"w1280\";\r\nexport const IMAGE_SIZE = \"w1280\";\r\n\r\n// w92, w154, w185, w342, w500, w780, original\r\nexport const POSTER_SIZE = \"w500\";\r\n","import React from \"react\";\r\nimport { Col } from \"antd\";\r\nimport \"./GridCards.css\";\r\n\r\nfunction GridCards(props) {\r\n  let { key, image, movieId, movieName } = props;\r\n\r\n  return (\r\n    <Col key={key} lg={6} md={8} xs={24}>\r\n      <div>\r\n        <a href={`/movie/${movieId}`}>\r\n          <img alt={movieName} src={image} />\r\n        </a>\r\n      </div>\r\n    </Col>\r\n  );\r\n}\r\n\r\nexport default GridCards;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Typography, Row } from \"antd\";\r\nimport { API_URL, API_KEY, IMAGE_BASE_URL, POSTER_SIZE } from \"../../config\";\r\nimport GridCard from \"../../commons/GridCards\";\r\n\r\nconst { Title } = Typography;\r\n\r\nfunction LandingPage() {\r\n  const buttonRef = useRef(null);\r\n\r\n  const [Movies, setMovies] = useState([]);\r\n  const [MainMovieImage, setMainMovieImage] = useState(null);\r\n  const [Loading, setLoading] = useState(true);\r\n  const [CurrentPage, setCurrentPage] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const endpoint = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US&page=1`;\r\n    fetchMovies(endpoint);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n  }, []);\r\n\r\n  const fetchMovies = endpoint => {\r\n    fetch(endpoint)\r\n      .then(result => result.json())\r\n      .then(result => {\r\n        setMovies([...Movies, ...result.results]);\r\n        setMainMovieImage(MainMovieImage || result.results[0]);\r\n        setCurrentPage(result.page);\r\n      }, setLoading(false))\r\n      .catch(error => console.error(\"Error:\", error));\r\n  };\r\n\r\n  const loadMoreItems = () => {\r\n    let endpoint = \"\";\r\n    setLoading(true);\r\n    endpoint = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US&page=${CurrentPage +\r\n      1}`;\r\n    fetchMovies(endpoint);\r\n  };\r\n\r\n  const handleScroll = () => {\r\n    const windowHeight =\r\n      \"innerHeight\" in window\r\n        ? window.innerHeight\r\n        : document.documentElement.offsetHeight;\r\n    const body = document.body;\r\n    const html = document.documentElement;\r\n    const docHeight = Math.max(\r\n      body.scrollHeight,\r\n      body.offsetHeight,\r\n      html.clientHeight,\r\n      html.scrollHeight,\r\n      html.offsetHeight\r\n    );\r\n    const windowBottom = windowHeight + window.pageYOffset;\r\n    if (windowBottom >= docHeight - 1) {\r\n      buttonRef.current.click();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: \"100%\", margin: \"0\" }}>\r\n      <div style={{ width: \"85%\", margin: \"1rem auto\" }}>\r\n        <Title level={2}> Popular movies </Title>\r\n        <hr />\r\n        <Row gutter={[16, 16]}>\r\n          {Movies &&\r\n            Movies.map((movie, index) => (\r\n              <React.Fragment key={index}>\r\n                <GridCard\r\n                  image={\r\n                    movie.poster_path\r\n                      ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\r\n                      : null\r\n                  }\r\n                  movieId={movie.id}\r\n                  movieName={movie.original_title}\r\n                />\r\n              </React.Fragment>\r\n            ))}\r\n        </Row>\r\n\r\n        {Loading && <div>Loading...</div>}\r\n\r\n        <br />\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <button ref={buttonRef} className=\"loadMore\" onClick={loadMoreItems}>\r\n            Load More\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LandingPage;\r\n","import React from \"react\";\r\n\r\nimport \"./NavBar.css\";\r\n\r\nfunction NavBar() {\r\n  return (\r\n    <nav\r\n      className=\"menu\"\r\n      style={{ position: \"fixed\", zIndex: 1, width: \"100%\" }}\r\n    >\r\n      <div className=\"menu__logo\">\r\n        <a href=\"/\">MovieDB</a>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react'\r\nimport { Typography } from 'antd';\r\n\r\nconst { Title } = Typography;\r\n\r\nfunction MainImage(props) {\r\n    return (\r\n        <div\r\n            style={{\r\n                background:\r\n                    `linear-gradient(to bottom, rgba(0,0,0,0)\r\n            39%,rgba(0,0,0,0)\r\n            41%,rgba(0,0,0,0.65)\r\n            100%),\r\n            url('${props.image}'), #1c1c1c`,\r\n                height: '500px',\r\n                backgroundSize: '100%, cover',\r\n                backgroundPosition: 'center, center',\r\n                width: '100%',\r\n                position: 'relative'\r\n            }}\r\n        >\r\n            <div>\r\n                <div style={{ position: 'absolute', maxWidth: '500px', bottom: '2rem', marginLeft: '2rem' }} >\r\n                    <Title style={{ color: 'white' }} level={2} > {props.title} </Title>\r\n                    <p style={{ color: 'white', fontSize: '1rem' }}  >{props.text} </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainImage\r\n","import React from \"react\";\r\nimport { Descriptions } from \"antd\";\r\n\r\nfunction MovieInfo(props) {\r\n  const { movie } = props;\r\n\r\n  return (\r\n    <Descriptions title=\"Movie Info\" level={4} bordered>\r\n      <Descriptions.Item label=\"Title\">\r\n        {movie.original_title}\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"Original Release\">\r\n        {movie.release_date}\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"Running Time\">\r\n        {movie.runtime} min.\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"User Score\">\r\n        {movie.vote_average}/10\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"Popularity\">\r\n        {movie.popularity}\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"Status\">{movie.status}</Descriptions.Item>\r\n    </Descriptions>\r\n  );\r\n}\r\n\r\nexport default MovieInfo;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  API_URL,\r\n  API_KEY,\r\n  IMAGE_BASE_URL,\r\n  IMAGE_SIZE,\r\n  POSTER_SIZE\r\n} from \"../../config\";\r\nimport MainImage from \"./Sections/MainImage\";\r\nimport MovieInfo from \"./Sections/MovieInfo\";\r\nimport { Typography, Row } from \"antd\";\r\nimport GridCard from \"../../commons/GridCards\";\r\n\r\nconst { Title } = Typography;\r\n\r\nfunction MovieDetailPage(props) {\r\n  const movieId = props.match.params.movieId;\r\n  const [Movie, setMovie] = useState([]);\r\n  const [LoadingForMovie, setLoadingForMovie] = useState(true);\r\n  const buttonRef = useRef(null);\r\n\r\n  const [Movies, setMovies] = useState([]);\r\n  const [MainMovieImage, setMainMovieImage] = useState(null);\r\n  const [Loading, setLoading] = useState(true);\r\n  const [CurrentPage, setCurrentPage] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let endpointForMovieInfo = `${API_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`;\r\n    fetchDetailInfo(endpointForMovieInfo);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const endpoint = `${API_URL}movie/${movieId}/similar?api_key=${API_KEY}&language=en-US&page=1`;\r\n    fetchMovies(endpoint);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n  }, []);\r\n\r\n  const fetchMovies = endpoint => {\r\n    fetch(endpoint)\r\n      .then(result => result.json())\r\n      .then(result => {\r\n        setMovies([...Movies, ...result.results]);\r\n        setMainMovieImage(MainMovieImage || result.results[0]);\r\n        setCurrentPage(result.page);\r\n      }, setLoading(false))\r\n      .catch(error => console.error(\"Error:\", error));\r\n  };\r\n\r\n  const loadMoreItems = () => {\r\n    let endpoint = \"\";\r\n    setLoading(true);\r\n    endpoint = `${API_URL}movie/${movieId}/similar?api_key=${API_KEY}&language=en-US&page=${CurrentPage +\r\n      1}`;\r\n    fetchMovies(endpoint);\r\n  };\r\n\r\n  const handleScroll = () => {\r\n    const windowHeight =\r\n      \"innerHeight\" in window\r\n        ? window.innerHeight\r\n        : document.documentElement.offsetHeight;\r\n    const body = document.body;\r\n    const html = document.documentElement;\r\n    const docHeight = Math.max(\r\n      body.scrollHeight,\r\n      body.offsetHeight,\r\n      html.clientHeight,\r\n      html.scrollHeight,\r\n      html.offsetHeight\r\n    );\r\n    const windowBottom = windowHeight + window.pageYOffset;\r\n    if (windowBottom >= docHeight - 1) {\r\n      buttonRef.current.click();\r\n    }\r\n  };\r\n\r\n  const fetchDetailInfo = endpoint => {\r\n    fetch(endpoint)\r\n      .then(result => result.json())\r\n      .then(result => {\r\n        setMovie(result);\r\n        setLoadingForMovie(false);\r\n      })\r\n      .catch(error => console.error(\"Error:\", error));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!LoadingForMovie ? (\r\n        <MainImage\r\n          image={`${IMAGE_BASE_URL}${IMAGE_SIZE}${Movie.backdrop_path}`}\r\n          title={Movie.original_title}\r\n          text={Movie.overview}\r\n        />\r\n      ) : (\r\n        <div>loading...</div>\r\n      )}\r\n\r\n      <div style={{ width: \"85%\", margin: \"1rem auto\" }}>\r\n        {!LoadingForMovie ? <MovieInfo movie={Movie} /> : <div>loading...</div>}\r\n      </div>\r\n      <br />\r\n      <div style={{ width: \"100%\", margin: \"0\" }}>\r\n        <div style={{ width: \"85%\", margin: \"1rem auto\" }}>\r\n          <Title level={2}> Similar Movies </Title>\r\n          <hr />\r\n          <Row gutter={[16, 16]}>\r\n            {Movies &&\r\n              Movies.map((movie, index) => (\r\n                <React.Fragment key={index}>\r\n                  <GridCard\r\n                    image={\r\n                      movie.poster_path\r\n                        ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\r\n                        : null\r\n                    }\r\n                    movieId={movie.id}\r\n                    movieName={movie.original_title}\r\n                  />\r\n                </React.Fragment>\r\n              ))}\r\n          </Row>\r\n\r\n          {Loading && <div>Loading...</div>}\r\n\r\n          <br />\r\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <button\r\n              ref={buttonRef}\r\n              className=\"loadMore\"\r\n              onClick={loadMoreItems}\r\n            >\r\n              Load More\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MovieDetailPage;\r\n","import React, { Suspense } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport LandingPage from \"./views/LandingPage/LandingPage.js\";\r\nimport NavBar from \"./views/NavBar/NavBar\";\r\nimport MovieDetail from \"./views/MovieDetail/MovieDetail\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <NavBar />\r\n      <div style={{ paddingTop: \"69px\", minHeight: \"calc(100vh - 80px)\" }}>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={LandingPage} />\r\n          <Route exact path=\"/movie/:movieId\" component={MovieDetail} />\r\n        </Switch>\r\n      </div>\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}